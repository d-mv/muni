{"version":3,"sources":["components/Button.tsx","components/style/Button.module.scss","styles/Content.ts","modules/locations_list.ts","styles/form/Form.ts","features/Register/index.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_style_Button_module_scss__WEBPACK_IMPORTED_MODULE_1__","_style_Button_module_scss__WEBPACK_IMPORTED_MODULE_1___default","Button","props","buttonStyle","style","mode","trans","a","createElement","className","onClick","action","actionMessage","type","submit","undefined","disabled","aria-label","label","children","title","module","exports","minimal","button-template","primary","secondary","secondaryFlat","attention","cancel","primarySmall","form","Content","styled","div","_templateObject","padding","locationsList","locations","language","arguments","length","filter","el","Object","keys","name","includes","unsortedResult","map","_id","push","result","sort","value","Form","direction","connect","state","message","loading","typed","register","setModule","setMessage","setLoading","typingData","text","short","location","fName","lName","pass","secondPass","email","_useState","useState","_useState2","slicedToArray","setDisabled","defaultValue","defaultList","_useState3","concat","toConsumableArray","_useState4","locationsObject","setLocationsObject","useEffect","handleInputChange","event","target","defineProperty","showElement","react_default","Loading","emailElement","formSection","placeholder","passwordElement","styles","regular","notMatching","border","locationsElement","formSelection","list","fNameElement","focus","lNameElement","form_Form","onSubmit","preventDefault","settings","Label","Field","onChange","minLength","required","InLine","justify","id"],"mappings":"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","file":"static/js/10.389179cd.chunk.js","sourcesContent":["import React from \"react\";\n\nimport style from \"./style/Button.module.scss\";\n\nconst Button = (props: {\n  children?: any;\n  action?: () => void;\n  mode: string;\n  submit?: boolean;\n  disabled?: boolean;\n  label?: string;\n  title?: string;\n  actionMessage?: (arg0: string) => void;\n}) => {\n  let undefined;\n  let buttonStyle = style[props.mode] || style.trans;\n\n  const handleClick = () => {\n    if (props.action) props.action();\n    if (props.actionMessage) props.actionMessage(props.mode);\n  };\n\n  return (\n    <button\n      className={buttonStyle}\n      onClick={() => handleClick()}\n      type={props.submit ? \"submit\" : undefined}\n      disabled={props.disabled}\n      aria-label={props.label}>\n      {props.children || props.title}\n    </button>\n  );\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"minimal\":\"Button_minimal__298kb\",\"button-template\":\"Button_button-template__1kqd1\",\"disabled\":\"Button_disabled__2Iwkl\",\"primary\":\"Button_primary__2WdqY\",\"secondary\":\"Button_secondary__LLofr\",\"secondaryFlat\":\"Button_secondaryFlat__3tioF\",\"attention\":\"Button_attention__3GdCk\",\"cancel\":\"Button_cancel__a1znz\",\"primarySmall\":\"Button_primarySmall__3f83K\",\"trans\":\"Button_trans__3y-8c\",\"form\":\"Button_form__2hU85\"};","import styled from \"styled-components\";\n\nexport interface IProps {\n  padding?: string;\n}\n\nconst Content = styled.div<IProps>`\n  padding: ${props => (props.padding ? props.padding : 0)};\n`;\n\nexport default Content;\n","import { indexedObjAny } from \"../store/types\";\n\n/**\n * Function to process locations object to provide array of location names\n * @function locations\n * @param {Array} locations\n * @param {string} language\n * @returns {Object} - in the form of {location:id}\n */\nexport const locationsList = (\n  locations: any,\n  language: string = \"\"\n): Array<any> => {\n  // return empty array if empty params supplied\n  if (locations.length === 0 || language === \"\") return [];\n  // check if names contain language requested\n  const check = locations.filter((el: any) =>\n    Object.keys(el.name).includes(language)\n  );\n  // return empty array if not\n  if (check.length !== locations.length) return [];\n  // process the names as per language request\n  const unsortedResult: indexedObjAny = {};\n  const locationsList: Array<string> = [];\n  locations.map((el: any) => {\n    // add to unsorted list\n    unsortedResult[el.name[language]] = el._id;\n    // add to array of locations to be sorted\n    locationsList.push(el.name[language]);\n    return null;\n  });\n  // sort locations and push appropriate pair to the result\n  const result: Array<indexedObjAny> = [];\n  locationsList.sort().map((el: any) => {\n    // add a pair to the resulting array\n    result.push({ value: unsortedResult[el], label: el });\n    return null;\n  });\n  return result;\n};\n\nexport default locationsList;\n","import styled from \"styled-components\";\n\nexport interface IProps {\n  direction: string;\n}\n\nconst Form = styled.form<IProps>`\n  padding: 0.5rem 1rem;\n  direction: ${props => props.direction};\n`;\n\nexport default Form;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { formSection, formSelection } from \"../../components/formSection\";\n\nimport { AppState } from \"../../store\";\nimport * as TYPE from \"../../store/types\";\nimport {\n  register,\n  setModule,\n  setMessage,\n  setLoading,\n  typingData\n} from \"../../store/users/actions\";\n\nimport Loading from \"../../components/Loading\";\nimport ButtonsWrapper from \"../../layout/ButtonsWrapper\";\nimport Button from \"../../components/Button\";\nimport button from \"../../components/style/Button.module.scss\";\nimport Label from \"../../styles/form/Label\";\nimport locationsList from \"../../modules/locations_list\";\nimport { LocationState } from \"../../models\";\nimport { indexedObjAny } from \"../../store/types\";\nimport InLine from \"../../styles/utils/InLine\";\nimport Field from \"../../styles/form/Field\";\nimport Form from \"../../styles/form/Form\";\nimport Content from \"../../styles/Content\";\n\nconst Register = (props: {\n  locations: LocationState;\n  // storedLocations?: TYPE.data;\n  language: indexedObjAny;\n  message: string;\n  loading: boolean;\n  register: (arg0: TYPE.registerType) => void;\n  setModule: (arg0: string) => void;\n  setMessage: (arg0: string) => void;\n  typed: TYPE.indexedObj;\n  setLoading: (arg0: boolean) => void;\n  typingData: (arg0: { [index: string]: any }) => void;\n}) => {\n  // get the language\n  const { locations, language, message, loading, typed, setMessage } = props;\n  const { text, direction, short } = language;\n  const { location, fName, lName, pass, secondPass, email } = typed;\n  const [disabled, setDisabled] = useState(true);\n\n  const defaultValue = { label: text[\"register.prompt.city\"], value: -1 };\n  const defaultList = locationsList(locations, short);\n  const [locationsObject, setLocationsObject] = useState([\n    defaultValue,\n    ...defaultList\n  ]);\n\n  useEffect(() => {\n    if (\n      typed.location &&\n      typed.location !== \"\" &&\n      locationsObject.length === defaultList.length + 1\n    )\n      setLocationsObject(defaultList);\n  }, [locationsObject, typed]);\n\n  // enable the button, when ready\n  useEffect(() => {\n    if (!fName && !lName && !location && !email && !pass && !secondPass) {\n      setDisabled(true);\n    } else if (\n      fName &&\n      lName &&\n      location &&\n      email &&\n      pass &&\n      pass.length >= 7 &&\n      secondPass &&\n      pass === secondPass\n    ) {\n      setDisabled(false);\n    }\n  }, [fName, lName, location, email, pass, secondPass]);\n\n  // check the passwords\n  useEffect(() => {\n    if (secondPass && pass && pass.length < 7) {\n      setMessage(text[\"register.passwords.min-7\"]);\n    } else if (pass && secondPass && pass !== secondPass)\n      setMessage(text[\"register.passwords.dont-match\"]);\n  }, [pass, secondPass]);\n\n  // * form methods\n  // handle data submit\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // only if not loading & not disabled\n    if (!loading && !disabled) {\n      props.register({\n        email,\n        pass,\n        location,\n        fName,\n        lName,\n        settings: {\n          language: props.language.short\n        }\n      });\n    }\n  };\n\n  // handle fields input changes\n  const handleInputChange = (event: any) => {\n    if (message) {\n      props.setMessage(\"\");\n    }\n    const { value } = event.target;\n    let name = event.target.name;\n    if (!name) name = \"location\";\n    // set only once\n    if (typed[name] !== value) {\n      props.typingData({ [name]: value });\n    }\n  };\n\n  // set the form elements\n  const showElement = loading ? (\n    <div className='formLoading'>\n      <Loading />\n    </div>\n  ) : (\n    <div className='formMessage'>{message}</div>\n  );\n\n  let emailElement = formSection({\n    label: text[\"login.label.email\"],\n    type: \"email\",\n    name: \"email\",\n    value: typed[email],\n    placeholder: text[\"login.prompt.email\"],\n    action: handleInputChange,\n    direction: direction\n  });\n\n  let passwordElement = formSection({\n    label: text[\"login.label.password\"],\n    type: \"password\",\n    name: \"pass\",\n    value: typed[pass],\n    placeholder: text[\"login.prompt.password\"],\n    action: handleInputChange,\n    length: 7,\n    direction: direction\n  });\n\n  const styles = {\n    regular: {},\n    notMatching: {\n      border: \".1rem solid var(--colorAttention)\"\n    }\n  };\n\n  const locationsElement = formSelection({\n    list: locationsObject,\n    value: typed.location,\n    direction,\n    label: text[\"login.label.location\"],\n    action: handleInputChange,\n    register: true\n  });\n\n  const fNameElement = formSection({\n    label: text[\"login.label.fname\"],\n    type: \"text\",\n    name: \"fName\",\n    value: typed[fName],\n    placeholder: text[\"login.prompt.fname\"],\n    action: handleInputChange,\n    length: 2,\n    focus: !props.loading,\n    direction: direction\n  });\n  const lNameElement = formSection({\n    label: text[\"login.label.lname\"],\n    type: \"text\",\n    name: \"lName\",\n    value: typed[lName],\n    placeholder: text[\"login.prompt.lname\"],\n    action: handleInputChange,\n    length: 3,\n    direction: direction\n  });\n\n  return (\n    <Content padding='1rem'>\n    <Form\n      direction={ direction }\n      onSubmit={handleSubmit}>\n      {/* visible during registration */}\n      {locationsElement}\n      {fNameElement}\n      {lNameElement}\n      {emailElement}\n      {passwordElement}\n      <section className='section'>\n        <Label direction={direction}>\n          {text[\"login.label.password.repeat\"]}\n        </Label>\n        <Field\n          direction={direction}\n          type='password'\n          name='secondPass'\n          value={typed[secondPass]}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            handleInputChange(event)\n          }\n          placeholder={text[\"login.prompt.password.repeat\"]}\n          minLength={7}\n          required\n          style={pass === secondPass ? styles.regular : styles.notMatching}\n        />\n      </section>\n      {/* message & loading */}\n      {showElement}\n      {/* buttons */}\n      <InLine direction={direction} justify='space-around'>\n        <Button\n          mode='form'\n          submit\n          disabled={disabled || loading}\n          label='Submit'>\n          <input\n            type='button'\n            value={text[\"login.button.register\"]}\n            id='submit_button'\n            className={disabled ? \"primaryButtonDisabled\" : \"primaryButton\"}\n          />\n        </Button>\n      </InLine>\n      </Form></Content>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    locations: state.locations,\n    language: state.language,\n    message: state.message,\n    loading: state.loading,\n    typed: state.typed\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { register, setModule, setMessage, setLoading, typingData }\n)(Register);\n"],"sourceRoot":""}