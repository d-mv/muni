{"version":3,"sources":["styles/App.module.scss","City.tsx","modules/scroll_calc.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","App-logo","App-logo-spin","App-header","App-link","locations","Haifa","Tel-Aviv","Jerusalem","City","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","city","setCity","_React$useState3","_React$useState4","cityId","setCityId","names","keys","swiping","direction","id","arguments","length","undefined","currentId","total","scrollCalculator","handlers","useSwipeable","onSwipedLeft","eventData","onSwipedRight","preventDefaultTouchmoveEvent","background","concat","react_default","a","createElement","assign","style","src_City","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JACAA,EAAAC,QAAA,CAAkBC,IAAA,iBAAAC,WAAA,sBAAAC,gBAAA,2BAAAC,aAAA,wBAAAC,WAAA,sHCKZC,SAAyC,CAC7CC,MACE,2FACFC,WACE,8FACFC,UACE,kGA6BWC,EA1BF,SAACC,GAA4B,IAAAC,EAChBC,IAAMC,SAAS,SADCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjCM,EADiCH,EAAA,GAC3BI,EAD2BJ,EAAA,GAAAK,EAEZP,IAAMC,SAAS,GAFHO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjCE,EAFiCD,EAAA,GAEzBE,EAFyBF,EAAA,GAIlCG,EAAQR,OAAOS,KAAKnB,GAEpBoB,EAAU,SAACC,GACf,IAAMC,ECtBe,WAIb,IACNA,EAJJD,EAGUE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAHU,OACpBG,EAEUH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EADVE,EACUJ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAiBV,MAdkB,SAAdJ,EAEAC,EADEI,EAAY,EAAIC,EACb,EAEAD,EAAY,EAGI,UAAdL,IAEPC,EADEI,EAAY,EAAI,EACbC,EAEAD,EAAY,GAGdJ,GAAM,EDCAM,CAAiBP,EAAWL,EAASE,EAAMM,OAAS,GAC3DP,EAAUK,GACVT,EAAQK,EAAMI,KAEdO,EAAWC,YAAa,CAC5BC,aAAc,SAAAC,GAAS,OAAIZ,EAAQ,SACnCa,cAAe,SAAAD,GAAS,OAAIZ,EAAQ,UACpCc,8BAA8B,IAE1BC,EAAa,CACjBA,WAAU,wBAAAC,OAA0BpC,EAAUY,GAApC,6CAEZ,OACEyB,EAAAC,EAAAC,cAAA,OAAA7B,OAAA8B,OAAA,GAAUX,EAAV,CAAoBY,MAAON,IACzBE,EAAAC,EAAAC,cAAA,UAAK3B,KE1BIjB,SAJO,WACpB,OAAO0C,EAAAC,EAAAC,cAACG,EAAD,CAAM9B,KAAK,YCKA+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.928f7fe9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Fx1V\",\"App-logo\":\"App_App-logo__3PLJ0\",\"App-logo-spin\":\"App_App-logo-spin__1aHtD\",\"App-header\":\"App_App-header__2zx-C\",\"App-link\":\"App_App-link__2AYlV\"};","import React from \"react\";\nimport { useSwipeable} from \"react-swipeable\";\n\nimport { scrollCalculator} from './modules/scroll_calc'\nimport \"./styles/City.module.scss\";\n\nconst locations: { [index: string]: string } = {\n  Haifa:\n    \"https://res.cloudinary.com/diciu4xpu/image/upload/v1558177726/muni/cities/city_haifa.jpg\",\n  \"Tel-Aviv\":\n    \"https://res.cloudinary.com/diciu4xpu/image/upload/v1558177721/muni/cities/city_tel-aviv.jpg\",\n  Jerusalem:\n    \"https://res.cloudinary.com/diciu4xpu/image/upload/v1558177724/muni/cities/city__jerusalem.jpg\"\n};\n\nconst City = (props: { city: string }) => {\n  const [city, setCity] = React.useState(\"Haifa\");\n  const [cityId, setCityId] = React.useState(0);\n\n  const names = Object.keys(locations);\n\n  const swiping = (direction: any) => {\n    const id = scrollCalculator(direction, cityId, (names.length - 1));\n        setCityId(id);\n        setCity(names[id]);\n  };\n  const handlers = useSwipeable({\n    onSwipedLeft: eventData => swiping(\"LEFT\"),\n    onSwipedRight: eventData => swiping(\"RIGHT\"),\n    preventDefaultTouchmoveEvent: true\n  });\n  const background = {\n    background: `rgba(0, 0, 0, 0) url(${locations[city]}) no-repeat scroll center center / cover`\n  };\n  return (\n    <main {...handlers} style={background}>\n      <h1>{city}</h1>\n    </main>\n  );\n};\n\nexport default City;\n\n// const handlers = useSwipeable({\n//   onSwipedLeft: () => slide(NEXT),\n//   onSwipedRight: () => slide(PREV),\n//   preventDefaultTouchmoveEvent: true,\n//   trackMouse: true\n// });\n","const scrollCalculator = (\n  direction: string = \"LEFT\" || \"RIGHT\",\n  currentId: number,\n  total: number\n):number => {\n  let id;\n  // if swiping to the left\n  if (direction === \"LEFT\") {\n    if (currentId + 1 > total) {\n      id = 0;\n    } else {\n      id = currentId + 1;\n    }\n    // if swiping to the right\n  } else if (direction === \"RIGHT\") {\n    if (currentId - 1 < 0) {\n      id = total;\n    } else {\n      id = currentId - 1;\n    }\n  }\n  return id || 0;\n};\n\nexport { scrollCalculator };\n","import React from \"react\";\n\nimport City from \"./City\";\n\nimport \"./styles/App.module.scss\";\n\nconst App: React.FC = () => {\n  return <City city='Haifa' />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}