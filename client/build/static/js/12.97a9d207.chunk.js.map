{"version":3,"sources":["styles/Content.ts","modules/locations_list.ts","features/Register/index.tsx"],"names":["Content","styled","div","_templateObject","white","props","padding","locationsList","locations","language","arguments","length","undefined","filter","el","Object","keys","name","includes","unsortedResult","map","_id","push","result","sort","value","label","connect","state","message","loading","typed","register","setModule","setMessage","setLoading","typingData","text","direction","short","location","fName","lName","pass","secondPass","email","_useState","useState","_useState2","slicedToArray","disabled","setDisabled","defaultValue","defaultList","_useState3","concat","toConsumableArray","_useState4","locationsObject","setLocationsObject","useEffect","handleInputChange","event","target","defineProperty","messageObject","react_default","a","createElement","className","Loading","emailElement","formSection","type","placeholder","action","passwordElement","sPasswordElement","attention","locationsElement","formSelection","list","fNameElement","focus","lNameElement","Form","onSubmit","preventDefault","settings","InLine","justify","Button","mode","submit","id"],"mappings":"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","file":"static/js/12.97a9d207.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { white } from \"./_colors\";\n\nexport interface IProps {\n  padding?: string;\n}\n\nconst Content = styled.div<IProps>`\n  background-color: ${white};\n  padding: ${props => (props.padding ? props.padding : 0)};\n`;\n\nexport default Content;\n","import { indexedObjAny } from \"../store/types\";\n\n/**\n * Function to process locations object to provide array of location names\n * @function locations\n * @param {Array} locations\n * @param {string} language\n * @returns {Object} - in the form of {location:id}\n */\nexport const locationsList = (\n  locations: any,\n  language: string = \"\"\n): Array<any> => {\n  // return empty array if empty params supplied\n  if (locations.length === 0 || language === \"\") return [];\n  // check if names contain language requested\n  const check = locations.filter((el: any) =>\n    Object.keys(el.name).includes(language)\n  );\n  // return empty array if not\n  if (check.length !== locations.length) return [];\n  // process the names as per language request\n  const unsortedResult: indexedObjAny = {};\n  const locationsList: Array<string> = [];\n  locations.map((el: any) => {\n    // add to unsorted list\n    unsortedResult[el.name[language]] = el._id;\n    // add to array of locations to be sorted\n    locationsList.push(el.name[language]);\n    return null;\n  });\n  // sort locations and push appropriate pair to the result\n  const result: Array<indexedObjAny> = [];\n  locationsList.sort().map((el: any) => {\n    // add a pair to the resulting array\n    result.push({ value: unsortedResult[el], label: el });\n    return null;\n  });\n  return result;\n};\n\nexport default locationsList;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { formSection, formSelection } from \"../../components/formSection\";\n\nimport { AppState } from \"../../store\";\nimport * as TYPE from \"../../store/types\";\nimport {\n  register,\n  setModule,\n  setMessage,\n  setLoading,\n  typingData\n} from \"../../store/users/actions\";\n\nimport Loading from \"../../components/Loading\";\nimport Button from \"../../components/Button\";\nimport Label from \"../../styles/form/Label\";\nimport locationsList from \"../../modules/locations_list\";\nimport { LocationState } from \"../../models\";\nimport { indexedObjAny } from \"../../store/types\";\nimport InLine from \"../../styles/utils/InLine\";\nimport Field from \"../../styles/form/Field\";\nimport Form from \"../../styles/form/Form\";\nimport Content from \"../../styles/Content\";\n\nconst Register = (props: {\n  locations: LocationState;\n  language: indexedObjAny;\n  message: string;\n  loading: boolean;\n  register: (arg0: TYPE.registerType) => void;\n  setModule: (arg0: string) => void;\n  setMessage: (arg0: string) => void;\n  typed: TYPE.indexedObj;\n  setLoading: (arg0: boolean) => void;\n  typingData: (arg0: { [index: string]: any }) => void;\n}) => {\n  // get the language\n  const { locations, language, message, loading, typed, setMessage } = props;\n  const { text, direction, short } = language;\n  const { location, fName, lName, pass, secondPass, email } = typed;\n  const [disabled, setDisabled] = useState(true);\n\n  const defaultValue = { label: text[\"register.prompt.city\"], value: -1 };\n  const defaultList = locationsList(locations, short);\n  const [locationsObject, setLocationsObject] = useState([\n    defaultValue,\n    ...defaultList\n  ]);\n\n  useEffect(() => {\n    if (\n      typed.location &&\n      typed.location !== \"\" &&\n      locationsObject.length === defaultList.length + 1\n    )\n      setLocationsObject(defaultList);\n  }, [locationsObject, typed]);\n\n  // enable the button, when ready\n  useEffect(() => {\n    if (!fName && !lName && !location && !email && !pass && !secondPass) {\n      setDisabled(true);\n    } else if (\n      fName &&\n      lName &&\n      location &&\n      email &&\n      pass &&\n      pass.length >= 7 &&\n      secondPass &&\n      pass === secondPass\n    ) {\n      setDisabled(false);\n    }\n  }, [fName, lName, location, email, pass, secondPass]);\n\n  // check the passwords\n  useEffect(() => {\n    if (secondPass && pass && pass.length < 7) {\n      setMessage(text[\"register.passwords.min-7\"]);\n    } else if (pass && secondPass && pass !== secondPass)\n      setMessage(text[\"register.passwords.dont-match\"]);\n  }, [pass, secondPass]);\n\n  // * form methods\n  // handle data submit\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // only if not loading & not disabled\n    if (!loading && !disabled) {\n      props.register({\n        email,\n        pass,\n        location,\n        fName,\n        lName,\n        settings: {\n          language: props.language.short\n        }\n      });\n    }\n  };\n\n  // handle fields input changes\n  const handleInputChange = (event: any) => {\n    if (message) {\n      props.setMessage(\"\");\n    }\n    const { value } = event.target;\n    let name = event.target.name;\n    if (!name) name = \"location\";\n    // set only once\n    if (typed[name] !== value) {\n      props.typingData({ [name]: value });\n    }\n  };\n\n  // set the form elements\n  const messageObject = loading ? (\n    <div className='formLoading'>\n      <Loading />\n    </div>\n  ) : (\n    <div className='formMessage'>{message}</div>\n  );\n\n  const emailElement = formSection({\n    label: text[\"login.label.email\"],\n    type: \"email\",\n    name: \"email\",\n    value: typed[email],\n    placeholder: text[\"login.prompt.email\"],\n    action: handleInputChange,\n    direction: direction\n  });\n\n  const passwordElement = formSection({\n    label: text[\"login.label.password\"],\n    type: \"password\",\n    name: \"pass\",\n    value: typed[pass],\n    placeholder: text[\"login.prompt.password\"],\n    action: handleInputChange,\n    length: 7,\n    direction: direction\n  });\n  \n  const sPasswordElement = formSection({\n    attention: pass !== secondPass,\n    label: text[\"login.label.password.repeat\"],\n    type: \"password\",\n    name: \"secondPass\",\n    value: typed[secondPass],\n    placeholder: text[\"login.prompt.password.repeat\"],\n    action: handleInputChange,\n    length: 7,\n    direction: direction\n  });\n\n  const locationsElement = formSelection({\n    list: locationsObject,\n    value: typed.location,\n    direction,\n    label: text[\"login.label.location\"],\n    action: handleInputChange,\n    register: true\n  });\n\n  const fNameElement = formSection({\n    label: text[\"login.label.fname\"],\n    type: \"text\",\n    name: \"fName\",\n    value: typed[fName],\n    placeholder: text[\"login.prompt.fname\"],\n    action: handleInputChange,\n    length: 2,\n    focus: !props.loading,\n    direction: direction\n  });\n  const lNameElement = formSection({\n    label: text[\"login.label.lname\"],\n    type: \"text\",\n    name: \"lName\",\n    value: typed[lName],\n    placeholder: text[\"login.prompt.lname\"],\n    action: handleInputChange,\n    length: 3,\n    direction: direction\n  });\n\n  return (\n    <Content padding='1rem'>\n      <Form direction={direction} onSubmit={handleSubmit}>\n        {locationsElement}\n        {fNameElement}\n        {lNameElement}\n        {emailElement}\n        {passwordElement}\n        {sPasswordElement}\n        {messageObject}\n        <InLine direction={direction} justify='space-around'>\n          <Button\n            mode='form'\n            submit\n            disabled={disabled || loading}\n            label='Submit'>\n            <input\n              type='button'\n              value={text[\"login.button.register\"]}\n              id='submit_button'\n              className={disabled ? \"primaryButtonDisabled\" : \"primaryButton\"}\n            />\n          </Button>\n        </InLine>\n      </Form>\n    </Content>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    locations: state.locations,\n    language: state.language,\n    message: state.message,\n    loading: state.loading,\n    typed: state.typed\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { register, setModule, setMessage, setLoading, typingData }\n)(Register);\n"],"sourceRoot":""}