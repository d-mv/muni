{"version":3,"sources":["modules/locations_list.ts","features/Register/index.tsx"],"names":["locationsList","locations","language","arguments","length","undefined","filter","el","Object","keys","name","includes","unsortedResult","map","_id","push","result","sort","value","label","connect","state","message","loading","typed","register","setModule","setMessage","setLoading","typingData","props","text","direction","short","location","fName","lName","pass","secondPass","email","_useState","useState","_useState2","slicedToArray","disabled","setDisabled","defaultValue","defaultList","_useState3","concat","toConsumableArray","_useState4","locationsObject","setLocationsObject","useEffect","handleInputChange","event","target","defineProperty","showElement","react_default","a","createElement","className","Loading","emailElement","formSection","type","placeholder","action","passwordElement","styles","regular","notMatching","border","locationsElement","formSelection","list","fNameElement","focus","lNameElement","onSubmit","preventDefault","settings","Label","onChange","minLength","required","style","ButtonsWrapper","column","Button","mode","submit","aria-label","button","primary","id"],"mappings":"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","file":"static/js/13.f5d5afce.chunk.js","sourcesContent":["import { indexedObjAny } from \"../store/types\";\n\n/**\n * Function to process locations object to provide array of location names\n * @function locations\n * @param {Array} locations\n * @param {string} language\n * @returns {Object} - in the form of {location:id}\n */\nexport const locationsList = (\n  locations: any,\n  language: string = \"\"\n): Array<any> => {\n  // return empty array if empty params supplied\n  if (locations.length === 0 || language === \"\") return [];\n  // check if names contain language requested\n  const check = locations.filter((el: any) =>\n    Object.keys(el.name).includes(language)\n  );\n  // return empty array if not\n  if (check.length !== locations.length) return [];\n  // process the names as per language request\n  const unsortedResult: indexedObjAny = {};\n  const locationsList: Array<string> = [];\n  locations.map((el: any) => {\n    // add to unsorted list\n    unsortedResult[el.name[language]] = el._id;\n    // add to array of locations to be sorted\n    locationsList.push(el.name[language]);\n    return null;\n  });\n  // sort locations and push appropriate pair to the result\n  const result: Array<indexedObjAny> = [];\n  locationsList.sort().map((el: any) => {\n    // add a pair to the resulting array\n    result.push({ value: unsortedResult[el], label: el });\n    return null;\n  });\n  return result;\n};\n\nexport default locationsList;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { formSection, formSelection } from \"../../components/formSection\";\n\nimport { AppState } from \"../../store\";\nimport * as TYPE from \"../../store/types\";\nimport {\n  register,\n  setModule,\n  setMessage,\n  setLoading,\n  typingData\n} from \"../../store/users/actions\";\n\nimport Loading from \"../../components/Loading\";\nimport ButtonsWrapper from \"../../layout/ButtonsWrapper\";\nimport Button from \"../../components/Button\";\nimport button from \"../../components/style/Button.module.scss\";\nimport Label from \"../../layout/Label\";\nimport locationsList from \"../../modules/locations_list\";\nimport { LocationState } from \"../../models\";\nimport { indexedObjAny } from \"../../store/types\";\n\nconst Register = (props: {\n  locations: LocationState;\n  // storedLocations?: TYPE.data;\n  language: indexedObjAny;\n  message: string;\n  loading: boolean;\n  register: (arg0: TYPE.registerType) => void;\n  setModule: (arg0: string) => void;\n  setMessage: (arg0: string) => void;\n  typed: TYPE.indexedObj;\n  setLoading: (arg0: boolean) => void;\n  typingData: (arg0: { [index: string]: any }) => void;\n}) => {\n  // get the language\n  const { locations, language, message, loading, typed, setMessage } = props;\n  const { text, direction, short } = language;\n  const { location, fName, lName, pass, secondPass, email } = typed;\n  const [disabled, setDisabled] = useState(true);\n\n  const defaultValue = { label: text[\"register.prompt.city\"], value: -1 };\n  const defaultList = locationsList(locations, short);\n  const [locationsObject, setLocationsObject] = useState([\n    defaultValue,\n    ...defaultList\n  ]);\n\n  useEffect(() => {\n    if (\n      typed.location &&\n      typed.location !== \"\" &&\n      locationsObject.length === defaultList.length + 1\n    )\n      setLocationsObject(defaultList);\n  }, [locationsObject, typed]);\n\n  // enable the button, when ready\n  useEffect(() => {\n    if (!fName && !lName && !location && !email && !pass && !secondPass) {\n      setDisabled(true);\n    } else if (\n      fName &&\n      lName &&\n      location &&\n      email &&\n      pass &&\n      pass.length >= 7 &&\n      secondPass &&\n      pass === secondPass\n    ) {\n      setDisabled(false);\n    }\n  }, [fName, lName, location, email, pass, secondPass]);\n\n  // check the passwords\n  useEffect(() => {\n    if (secondPass && pass && pass.length < 7) {\n      setMessage(text[\"register.passwords.min-7\"]);\n    } else if (pass && secondPass && pass !== secondPass)\n      setMessage(text[\"register.passwords.dont-match\"]);\n  }, [pass, secondPass]);\n\n  // * form methods\n  // handle data submit\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // only if not loading & not disabled\n    if (!loading && !disabled) {\n      props.register({\n        email,\n        pass,\n        location,\n        fName,\n        lName,\n        settings: {\n          language: props.language.short\n        }\n      });\n    }\n  };\n\n  // handle fields input changes\n  const handleInputChange = (event: any) => {\n    if (message) {\n      props.setMessage(\"\");\n    }\n    const { value } = event.target;\n    let name = event.target.name;\n    if (!name) name = \"location\";\n    // set only once\n    if (typed[name]!==value) {\n    props.typingData({ [name]: value })};\n  };\n\n  // set the form elements\n  const showElement = loading ? (\n    <div className='formLoading'>\n      <Loading />\n    </div>\n  ) : (\n    <div className='formMessage'>{message}</div>\n  );\n\n  let emailElement = formSection({\n    label: text[\"login.label.email\"],\n    type: \"email\",\n    name: \"email\",\n    value: typed[email],\n    placeholder: text[\"login.prompt.email\"],\n    action: handleInputChange\n  });\n\n  let passwordElement = formSection({\n    label: text[\"login.label.password\"],\n    type: \"password\",\n    name: \"pass\",\n    value: typed[pass],\n    placeholder: text[\"login.prompt.password\"],\n    action: handleInputChange,\n    length: 7\n  });\n\n  const styles = {\n    regular: {},\n    notMatching: {\n      border: \".1rem solid var(--colorAttention)\"\n    }\n  };\n\n  const locationsElement = formSelection({\n    list: locationsObject,\n    value: typed.location,\n    direction,\n    label: text[\"login.label.location\"],\n    action: handleInputChange,\n    register: true,\n  });\n\n  const fNameElement = formSection({\n    label: text[\"login.label.fname\"],\n    type: \"text\",\n    name: \"fName\",\n    value: typed[fName],\n    placeholder: text[\"login.prompt.fname\"],\n    action: handleInputChange,\n    length: 2,\n    focus: !props.loading\n  });\n  const lNameElement = formSection({\n    label: text[\"login.label.lname\"],\n    type: \"text\",\n    name: \"lName\",\n    value: typed[lName],\n    placeholder: text[\"login.prompt.lname\"],\n    action: handleInputChange,\n    length: 3\n  });\n\n  return (\n    <form\n      className={direction === \"rtl\" ? \"formRight\" : \"formLeft\"}\n      onSubmit={handleSubmit}>\n      {/* visible during registration */}\n      {locationsElement}\n      {fNameElement}\n      {lNameElement}\n      {emailElement}\n      {passwordElement}\n      <section className='section'>\n        <Label\n          direction={direction}\n          value={text[\"login.label.password.repeat\"]}\n        />\n        <input\n          type='password'\n          name='secondPass'\n          value={typed[secondPass]}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            handleInputChange(event)\n          }\n          placeholder={text[\"login.prompt.password.repeat\"]}\n          minLength={7}\n          required\n          style={pass === secondPass ? styles.regular : styles.notMatching}\n        />\n      </section>\n      {/* message & loading */}\n      {showElement}\n      {/* buttons */}\n      <ButtonsWrapper column direction={direction}>\n        <Button\n          mode='form'\n          submit\n          disabled={disabled || loading}\n          aria-label='Submit'>\n          <input\n            className={disabled ? button.disabled : button.primary}\n            type='button'\n            value={text[\"login.button.register\"]}\n            id='submit_button'\n          />\n        </Button>\n      </ButtonsWrapper>\n    </form>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    locations: state.locations,\n    language: state.language,\n    message: state.message,\n    loading: state.loading,\n    typed: state.typed\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { register, setModule, setMessage, setLoading, typingData }\n)(Register);\n"],"sourceRoot":""}